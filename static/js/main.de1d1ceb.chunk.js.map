{"version":3,"sources":["constants/ActionTypes.js","actions/index.js","components/Search.js","components/Sort.js","components/Control.js","components/Form.js","components/TaskItem.js","components/TaskList.js","App.js","reportWebVitals.js","reducers/tasks.js","reducers/isDisplayForm.js","reducers/taskEditing.js","reducers/searchTask.js","reducers/sortTask.js","reducers/index.js","index.js"],"names":["LIST_ALL","SAVE_TASK","TOGGLE_FORM","CLOSE_FORM","OPEN_FORM","UPDATE_STATUS_TASK","DELETE_TASK","UPDATE_TASK","SET_NULL_EDIT_TASK","SEARCH_TASK","SORT_TASK","closeForm","type","types","openForm","setNullTaskEditing","Search","props","onSearch","state","keyword","trim","toLowerCase","onChange","e","target","name","value","setState","className","this","placeholder","onClick","Component","connect","dispatch","ownProps","actions","Sort","sortBy","sort","by","onSortTask","data-toggle","aria-haspopup","aria-expanded","Control","style","padding","Form","onSubmit","preventDefault","onSaveTask","resetForm","onSetNullEditingTask","status","onCloseForm","id","taskEditing","nextProps","taskEdit","isDisplayForm","aria-label","aria-hidden","color","htmlFor","disabled","task","TaskItem","onUpdateStatus","statusHandle","info","active","title","class","hiden","complete","cursor","onDeleteTask","onUpdateTask","onOpenForm","index","marginRight","TaskList","filterName","filterStatus","tasks","filter","a","indexOf","b","elems","map","search","App","onToggleForm","marginTop","transition","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","data","JSON","parse","localStorage","getItem","initialState","makeid","length","result","characters","charactersLength","i","charAt","Math","floor","random","STATUS_CHANGE","myReducer","action","findIndex","newTask","setItem","stringify","splice","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAAaA,EAAW,WACXC,EAAY,YACZC,EAAc,cACdC,EAAa,aACbC,EAAY,YACZC,EAAqB,qBACrBC,EAAc,cACdC,EAAc,cACdC,EAAqB,qBAErBC,EAAc,cACdC,EAAY,YCWZC,EAAY,WACrB,MAAO,CACHC,KAAMC,IAIDC,EAAW,WACpB,MAAO,CACHF,KAAMC,IAwBDE,EAAqB,WAC9B,MAAO,CACHH,KAAMC,I,OCpDRG,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAMRC,SAAW,WACT,EAAKD,MAAMC,SAAS,EAAKC,MAAMC,QAAQC,OAAOC,gBAR7B,EAWnBC,SAAW,SAACC,GACV,IAAIC,EAASD,EAAEC,OACXC,EAAOD,EAAOC,KACdC,EAAQF,EAAOE,MAEnB,EAAKC,SAAL,eACGF,EAAOC,KAfV,EAAKR,MAAQ,CACXC,QAAS,IAHM,E,0CAqBnB,WAEE,OACE,qBAAKS,UAAU,sCAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,uBAAOjB,KAAK,OAAOc,KAAK,UACtBG,UAAU,qCACVN,SAAaO,KAAKP,SAClBQ,YAAY,WACd,qBAAKF,UAAU,qBAAf,SACE,wBAAQA,UAAU,kBAAkBjB,KAAK,SACvCoB,QAASF,KAAKZ,SADhB,+B,GAhCSe,aAkDNC,cAAQ,MARI,SAACC,EAAUC,GACpC,MAAO,CACLlB,SAAW,SAACE,GACV,OAAOe,EDmBa,SAACf,GACvB,MAAO,CACHR,KAAMC,EACNO,WCtBciB,CAAmBjB,QAK1Bc,CAAkClB,GClD3CsB,E,4MAEJC,OAAS,SAACA,EAAQZ,GAChB,IAAIa,EAAO,CAACC,GAAIF,EAAQZ,MAAOA,GAC/B,EAAKV,MAAMyB,WAAWF,I,4CAGxB,WAAU,IAAD,OACFA,EAAQV,KAAKb,MAAbuB,KACL,OACE,qBAAKX,UAAU,sCAAf,SACE,sBAAKA,UAAU,YAAf,UACE,wBAAQjB,KAAK,SAASiB,UAAU,+BAA+Bc,cAAY,WAAWC,gBAAc,OAAOC,gBAAc,QAAzH,kBAIA,sBAAKhB,UAAU,gBAAf,UACE,yBAASA,UAAuB,SAAXW,EAAKC,IAA6B,IAAdD,EAAKb,MAAa,8BAA+B,gBACxFK,QAAU,kBAAM,EAAKO,OAAO,OAAQ,IADtC,UAGE,mBAAGV,UAAU,qCAHf,YAKA,yBAASA,UAAuB,SAAXW,EAAKC,KAA8B,IAAfD,EAAKb,MAAc,8BAA+B,gBACzFK,QAAU,kBAAM,EAAKO,OAAO,QAAS,IADvC,UAGE,mBAAGV,UAAU,yCAHf,aAKA,qBAAKA,UAAU,qBACf,wBAAQA,UAAuB,WAAXW,EAAKC,IAA+B,IAAdD,EAAKb,MAAa,8BAA+B,gBACzFK,QAAU,kBAAM,EAAKO,OAAO,SAAU,IADxC,oBAGA,wBAASV,UAAuB,WAAXW,EAAKC,KAAgC,IAAfD,EAAKb,MAAc,8BAA+B,gBAC3FK,QAAU,kBAAM,EAAKO,OAAO,UAAW,IADzC,gC,GA/BON,aAoDJC,eAZS,SAACf,GACvB,MAAO,CACLqB,KAAMrB,EAAMqB,SAGW,SAACL,EAAUlB,GACpC,MAAO,CACLyB,WAAY,SAACF,GACX,OAAOL,EFuBW,SAACK,GACrB,MAAO,CACH5B,KAAMC,EACN2B,QE1BcH,CAAiBG,QAIxBN,CAA8CI,GCtC9CQ,E,4JAbb,WAEE,OACE,sBAAKjB,UAAU,MAAMkB,MAAO,CAAEC,QAAS,UAAvC,UAEE,cAAC,EAAD,IAEA,cAAC,EAAD,W,GATcf,aCChBgB,E,kDAEJ,WAAYhC,GAAQ,IAAD,8BAEjB,cAAMA,IA0DRM,SAAW,SAACC,GACV,IAAIC,EAASD,EAAEC,OACXC,EAAOD,EAAOC,KACdC,EAAQF,EAAOE,MAEnB,EAAKC,SAAL,eACGF,EAAOC,KAlEO,EAsEnBuB,SAAW,SAAC1B,GACVA,EAAE2B,iBACoB,KAAnB,EAAKhC,MAAMO,OAGd,EAAKT,MAAMmC,WAAW,EAAKjC,OAC3B,EAAKkC,YACL,EAAKpC,MAAMqC,yBA7EM,EA+EnBD,UAAY,WACV,EAAKzB,SAAS,CACZF,KAAK,GACL6B,OAAO,YAlFQ,EAuFnBC,YAAc,WACZ,EAAKvC,MAAMuC,cACX,EAAKvC,MAAMqC,wBArFX,EAAKnC,MAAM,CACTsC,GAAG,GACH/B,KAAK,GACL6B,OAAQ,UAPO,E,qDAanB,WAAqB,IAEdG,EAAe5B,KAAKb,MAApByC,YACDA,GACF5B,KAAKF,SAAS,CACZ6B,GAAIC,EAAYD,GAChB/B,KAAMgC,EAAYhC,KAClB6B,OAAQG,EAAYH,W,uCAK1B,SAA0BI,GACxB,GAAKA,EAAL,CAGA,IAAIC,EAAWD,EAAUD,YACrBE,EAEF9B,KAAKF,SAAS,CACZ6B,GAAIG,EAASH,GACb/B,KAAMkC,EAASlC,KACf6B,OAAQK,EAASL,SAGnBzB,KAAKF,SAAS,CACZ6B,GAAI,GACJ/B,KAAM,GACN6B,OAAQ,c,oBAmDd,WACE,OAAKzB,KAAKb,MAAM4C,cAIhB,sBAAKhC,UAAU,OAAf,UACE,sBAAKA,UAAU,sBAAf,UAAuCC,KAAKX,MAAMsC,GAAK,cAAe,kBACtE,wBAAQ7C,KAAK,SAASiB,UAAU,QAAQiC,aAAW,QACjD9B,QAAUF,KAAK0B,YADjB,SAGI,sBAAMO,cAAY,OAAOhB,MAAO,CAAEiB,MAAO,SAAzC,uBAGJ,qBAAKnC,UAAU,YAAf,SACI,uBAAMqB,SAAWpB,KAAKoB,SAAtB,UACE,sBAAKrB,UAAU,aAAf,UACE,uBAAOoC,QAAQ,OAAf,kBACA,uBAAOrD,KAAK,OAAOc,KAAK,OACtBG,UAAU,eAAe4B,GAAG,OAC5B9B,MAAQG,KAAKX,MAAMO,KACnBH,SAAWO,KAAKP,cAGpB,sBAAKM,UAAU,aAAf,UACE,uBAAOoC,QAAQ,SAAf,oBACA,yBAAQpC,UAAU,eAChBH,KAAK,SAAQ+B,GAAG,SAChB9B,MAAOG,KAAKX,MAAMoC,OAClBhC,SAAWO,KAAKP,SAHlB,UAKE,wBAAQI,MAAM,SAAd,oBACA,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,WAAd,4BAGJ,sBAAKE,UAAU,cAAf,UACE,wBAAQqC,SAA8B,KAAnBpC,KAAKX,MAAMO,KAAYd,KAAK,SAASiB,UAAU,uBAAlE,kBACA,wBACIjB,KAAK,QACLiB,UAAU,oBACVG,QAAUF,KAAKuB,UAHnB,8BApC4B,O,GA/FvBpB,aAuKJC,eArBS,SAACf,GACvB,MAAO,CACL0C,cAAe1C,EAAM0C,cACrBH,YAAavC,EAAMuC,gBAKI,SAACvB,EAAUlB,GACpC,MAAO,CACLmC,WAAY,SAACe,GACXhC,EJxJkB,SAACgC,GACrB,MAAO,CACHvD,KAAMC,EACNsD,QIqJO9B,CAAiB8B,KAE5BX,YAAa,WACXrB,EAASE,MAEXiB,qBAAsB,WACpBnB,EAASE,SAIAH,CAA6Ce,GCtKtDmB,E,4MAEJC,eAAiB,WACf,EAAKpD,MAAMoD,eAAe,EAAKpD,MAAMkD,KAAKV,K,EAG5Ca,aAAc,SAACf,GACb,IAKIgB,EALU,CACZC,OAAO,CAACC,MAAM,SAAUC,MAAM,oBAC9BC,MAAM,CAACF,MAAM,QAASC,MAAM,sBAC5BE,SAAS,CAACH,MAAM,YAAaC,MAAM,wBAEpBnB,GAEjB,OAAO,sBACLR,MAAS,CAAC8B,OAAQ,WAClB7C,QAAU,EAAKqC,eACfxC,UAAW0C,EAAKG,MAHX,SAGoBH,EAAKE,S,EAIlCK,aAAe,WACb,EAAK7D,MAAM6D,aAAa,EAAK7D,MAAMkD,KAAKV,IACxC,EAAKxC,MAAMuC,e,EAGbuB,aAAe,WACb,EAAK9D,MAAM+D,aACX,EAAK/D,MAAM8D,aAAa,EAAK9D,MAAMkD,O,4CAGrC,WAAU,IAAD,EACarC,KAAKb,MAApBkD,EADE,EACFA,KAAMc,EADJ,EACIA,MAEX,OAEE,qBAAIpD,UAAU,SAAd,UACI,oBAAIA,UAAU,QAAd,SAAwBoD,EAAQ,IAChC,oBAAIpD,UAAU,QAAd,SAAwBsC,EAAKzC,OAC7B,oBAAIG,UAAU,QAAd,SACGC,KAAKwC,aAAaH,EAAKZ,UAE1B,qBAAI1B,UAAU,QAAQkB,MAAS,CAACC,QAAQ,OAAxC,UACE,yBAAQnB,UAAU,0BAChBkB,MAAO,CAACmC,YAAY,OACpBlD,QAAUF,KAAKiD,aAFjB,UAIA,mBAAGlD,UAAU,gBAJb,WAMA,yBACEG,QAAUF,KAAKgD,aACfjD,UAAU,wBAFZ,UAGE,mBAAGA,UAAU,qBAHf,uB,GAjDWI,aAsFRC,eA1BS,SAACf,GACvB,MAAO,MAKkB,SAACgB,EAAUlB,GACpC,MAAO,CACLoD,eAAiB,SAACZ,GAChB,OAAOtB,ELzCe,SAACsB,GACzB,MAAO,CACH7C,KAAMC,EACN4C,MKsCcpB,CAAqBoB,KAEvCqB,aAAc,SAACrB,GACb,OAAOtB,ELrCa,SAACsB,GACvB,MAAO,CACH7C,KAAMC,EACN4C,MKkCcpB,CAAmBoB,KAErCD,YAAa,WACX,OAAOrB,EAASE,MAElB2C,WAAY,WACV,OAAO7C,EAASE,MAElB0C,aAAc,SAACZ,GACb,OAAOhC,ELvCa,SAACgC,GACvB,MAAO,CACHvD,KAAMC,EACNsD,QKoCc9B,CAAmB8B,QAK1BjC,CAA8CkC,G,OCrFvDe,E,kDAEJ,WAAYlE,GAAQ,IAAD,8BACjB,cAAMA,IAQRM,SAAW,SAACC,GACV,IAAIC,EAASD,EAAEC,OACXC,EAAOD,EAAOC,KACdC,EAAQF,EAAOE,MAEnB,EAAKC,SAAL,eACGF,EAAOC,KAZV,EAAKR,MAAQ,CACXiE,WAAa,GACbC,aAAgB,OALD,E,0CAoBnB,WAAU,IAAD,EACsBvD,KAAKb,MAA7BqE,EADE,EACFA,MAAOlE,EADL,EACKA,QAASoB,EADd,EACcA,KADd,EAE0BV,KAAKX,MAAjCkE,EAFE,EAEFA,aAAcD,EAFZ,EAEYA,WAEE,QAAjBC,IACFC,EAAQC,iBAAOD,GAAO,SAACE,GACrB,OAAOH,IAAiBG,EAAEjC,WAGJ,KAAtB6B,EAAW/D,SACbiE,EAAQC,iBAAOD,GAAO,SAACE,GACrB,OAA0E,IAAnEA,EAAE9D,KAAKJ,cAAcmE,QAAQL,EAAW9D,cAAcD,YAKjD,KAAZD,IACFkE,EAAQC,iBAAOD,GAAO,SAACnB,GACrB,OAAqD,IAA9CA,EAAKzC,KAAKJ,cAAcmE,QAAQrE,OAIvCoB,EAAKC,IAEP6C,EAAM9C,MAAK,SAACgD,EAAGE,GACb,OAAGF,EAAEhD,EAAKC,IAAInB,gBAAkBoE,EAAElD,EAAKC,IAAInB,cAAsB,EACzDkE,EAAEhD,EAAKC,IAAInB,cAAgBoE,EAAElD,EAAKC,IAAInB,cAAiBkB,EAAKb,OAASa,EAAKb,SAKtF,IAAIgE,EAAQL,EAAMM,KAAI,SAACzB,EAAMc,GACvB,OAAO,cAAC,EAAD,CACLd,KAAMA,EAAMc,MAAOA,GADCA,MAK5B,OACE,wBAAOpD,UAAU,mCAAjB,UACE,gCACE,qBAAIA,UAAU,SAAd,UACE,oBAAIA,UAAU,QAAd,mBACA,oBAAIA,UAAU,QAAd,kBACA,oBAAIA,UAAU,QAAd,oBACA,oBAAIA,UAAU,iBAAd,yBAGJ,kCACE,qBAAIA,UAAU,SAAd,UACE,oBAAIA,UAAU,UACd,oBAAIA,UAAU,QAAd,SACI,uBACEjB,KAAK,OAAOiB,UAAU,eACtBH,KAAK,aACLK,YAAY,iBACZR,SAAaO,KAAKP,aAGxB,oBAAIM,UAAU,QAAd,SACE,yBAAQA,UAAU,eAChBH,KAAK,eACLH,SAAaO,KAAKP,SAClBI,MAAQG,KAAKX,MAAMkE,aAHrB,UAKE,wBAAQ1D,MAAM,MAAd,iBACA,wBAAQA,MAAO,SAAf,oBACA,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,WAAd,4BAGJ,oBAAIE,UAAU,aAEf8D,Y,GA9FY1D,aAmHRC,eAdS,SAACf,GACvB,MAAO,CACLmE,MAAOnE,EAAMmE,MACblE,QAASD,EAAM0E,OACfrD,KAAMrB,EAAMqB,SAGW,SAACL,EAAUlB,GACpC,MAAO,KAMMiB,CAA6CiD,GC9GtDW,E,4MAEJC,aAAe,WACT,EAAK9E,MAAMyC,aACb,EAAKzC,MAAMqC,uBACX,EAAKrC,MAAM+D,cAEX,EAAK/D,MAAM8E,gB,4CAIf,WAAU,IACFlC,EAAkB/B,KAAKb,MAAvB4C,cAEN,OACE,sBAAKhC,UAAU,kBAAkBkB,MAAO,CAACiD,UAAU,QAAnD,UACE,oBAAInE,UAAU,cAAd,uBAEA,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAYgC,EAAgB,sCAAsC,MACrEd,MAAQ,CAAEkD,WAAW,UADvB,SAEE,cAAC,EAAD,MAEF,sBAAKpE,UAAYgC,EAAgB,sCACf,0CADlB,UAEI,yBACEhC,UAAU,wBACVG,QAASF,KAAKiE,aAFhB,UAGE,sBAAMlE,UAAU,eAHlB,kBAKA,cAAC,EAAD,IACA,cAAC,EAAD,iB,GA/BII,aA2DHC,eApBS,SAACf,GACvB,MAAO,CACL0C,cAAe1C,EAAM0C,cACrBH,YAAavC,EAAMuC,gBAII,SAACvB,EAAUlB,GACpC,MAAO,CACL8E,aAAc,WACZ5D,EP3CK,CACHvB,KAAMC,KO4CVmE,WAAY,WACV,OAAO7C,EAASE,MAElBiB,qBAAsB,WACpBnB,EAASE,SAIAH,CAA6C4D,GC1D7CI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,uBCJVQ,EAAOC,KAAKC,MAAMC,aAAaC,QAAQ,UAEvCC,EAAeL,GAAa,GAE5BM,EAAS,WAIT,IAJ0B,IAAhBC,EAAe,uDAAN,EACfC,EAAmB,GACnBC,EAAmB,iEACnBC,EAAmBD,EAAWF,OACxBI,EAAI,EAAGA,EAAIJ,EAAQI,IAC1BH,GAAUC,EAAWG,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,IAE1D,OAAOF,GAGLQ,EAAgB,CAACnD,OAAQ,WAAYI,SAAS,QAASD,MAAM,UA6DpDiD,EA3DC,WAAmC,IAAlCzG,EAAiC,uDAAzB6F,EAAca,EAAW,uCAC1C5C,GAAS,EAEb,OAAQ4C,EAAOjH,MACX,KAAKC,EACD,OAAOM,EACX,KAAKN,EAGD,GAAIgH,EAAO1D,KAAKV,IAKG,KAJfwB,EAAQ6C,oBAAU3G,GAAO,SAACgD,GACtB,OAAOA,EAAKV,KAAOoE,EAAO1D,KAAKV,SAI/BtC,EAAM8D,GAAS4C,EAAO1D,UAEvB,CACH,IAAI4D,EAAU,CACVtE,GAAIwD,EAAO,GACXvF,KAAMmG,EAAO1D,KAAKzC,KAClB6B,OAAQsE,EAAO1D,KAAKZ,QAExBpC,EAAK,CAAI4G,GAAJ,mBAAgB5G,IAKzB,OADA2F,aAAakB,QAAQ,QAASpB,KAAKqB,UAAU9G,IACtC,YAAIA,GAEf,KAAKN,EAYD,OARc,KAHdoE,EAAQ6C,oBAAU3G,GAAO,SAACgD,GACtB,OAAOA,EAAKV,KAAOoE,EAAOpE,SAG1BtC,EAAM8D,GAAN,2BACO9D,EAAM8D,IADb,IAEI1B,OAAOoE,EAAcxG,EAAM8D,GAAO1B,WAI1CuD,aAAakB,QAAQ,QAASpB,KAAKqB,UAAU9G,IACtC,YAAIA,GACf,KAAKN,EAQD,OAJc,KAHdoE,EAAQ6C,oBAAU3G,GAAO,SAACgD,GACtB,OAAOA,EAAKV,KAAOoE,EAAOpE,QAG1BtC,EAAM+G,OAAOjD,EAAO,GAExB6B,aAAakB,QAAQ,QAASpB,KAAKqB,UAAU9G,IACtC,YAAIA,GAEf,QAAS,OAAOA,ICpDTyG,EAdC,WAAkC,IAAjCzG,EAAgC,wDAAX0G,EAAW,uCAC7C,OAAQA,EAAOjH,MACX,KAAKC,EACD,OAAQM,EACZ,KAAKN,EACD,OAAO,EAEX,KAAKA,EACD,OAAO,EAEX,QAAS,OAAOM,ICDTyG,EAXC,WAAkC,IAAjCzG,EAAgC,uDAF9B,KAEmB0G,EAAW,uCAC7C,OAAQA,EAAOjH,MACX,KAAKC,EACD,OAAOgH,EAAO1D,KAClB,KAAKtD,EACD,OAAO,KACX,QAAS,OAAOM,ICKTyG,EATC,WAAkC,IAAjCzG,EAAgC,uDAF9B,GAEmB0G,EAAW,uCAC7C,OAAQA,EAAOjH,MACX,KAAKC,EACD,OAAOgH,EAAOzG,QAElB,QAAS,OAAOD,ICPpB6F,GAAe,CACCvE,GAAG,OACHd,MAAO,GAWZiG,GARC,WAAkC,IAAjCzG,EAAgC,uDAAzB6F,GAAca,EAAW,uCAC7C,OAAQA,EAAOjH,MACX,KAAKC,EACD,OAAOgH,EAAOrF,KAClB,QAAS,OAAOrB,ICKTyG,GAVGO,YAAiB,CAC/B7C,QACAzB,gBACAH,cAEAmC,SACArD,UCLE4F,GAAQC,YACZT,GACAU,OAAOC,8BAAgCD,OAAOC,gCAGhDC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAQA,GAAlB,SACE,cAAC,EAAD,QAIJO,SAASC,eAAe,SAM1B1C,M","file":"static/js/main.de1d1ceb.chunk.js","sourcesContent":["export const LIST_ALL = 'LIST_ALL';\nexport const SAVE_TASK = 'SAVE_TASK';\nexport const TOGGLE_FORM = 'TOGGLE_FORM';\nexport const CLOSE_FORM = 'CLOSE_FORM';\nexport const OPEN_FORM = 'OPEN_FORM';\nexport const UPDATE_STATUS_TASK = 'UPDATE_STATUS_TASK';\nexport const DELETE_TASK = 'DELETE_TASK';\nexport const UPDATE_TASK = 'UPDATE_TASK';\nexport const SET_NULL_EDIT_TASK = 'SET_NULL_EDIT_TASK';\nexport const FILTER_TASK_LIST = 'FILTER_TASK_LIST';\nexport const SEARCH_TASK = 'SEARCH_TASK';\nexport const SORT_TASK = 'SORT_TASK';\n\n\n","import * as types from '../constants/ActionTypes';\n\n\nexport const listAll = () =>{\n    return {\n        type: types.LIST_ALL\n    }\n};\n\nexport const saveTask = (task) => {\n    return {\n        type: types.SAVE_TASK,\n        task\n    }\n};\n\nexport const toggleForm = () => {\n    return {\n        type: types.TOGGLE_FORM\n    }\n};\n\nexport const closeForm = () => {\n    return {\n        type: types.CLOSE_FORM,\n    }\n};\n\nexport const openForm = () => {\n    return {\n        type: types.OPEN_FORM,\n    }\n};\nexport const updateStatus = (id) => {\n    return {\n        type: types.UPDATE_STATUS_TASK,\n        id//id:id\n    }\n}\n\nexport const deleteTask = (id) => {\n    return {\n        type: types.DELETE_TASK,\n        id//id:id\n    }\n}\n\nexport const updateTask = (task) => {\n    return {\n        type: types.UPDATE_TASK,\n        task\n    }\n}\n\nexport const setNullTaskEditing = () => {\n    return {\n        type: types.SET_NULL_EDIT_TASK,\n    }\n}\n\nexport const filterTaskList = (filter) => {\n    return {\n        type: types.FILTER_TASK_LIST,\n        filter // { filterName, filterStatus }\n\n    }\n}\n\nexport const searchTask = (keyword) => {\n    return {\n        type: types.SEARCH_TASK,\n        keyword // { filterName, filterStatus }\n    }\n}\n\nexport const sortTask = (sort) => {\n    return {\n        type: types.SORT_TASK,\n        sort // sort: sort\n    }\n}\n","import React, { Component} from 'react';\nimport { connect} from 'react-redux';\nimport * as actions from '../actions/index';\n\nclass Search extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      keyword: \"\"\n    };\n  }\n\n  onSearch = () => {\n    this.props.onSearch(this.state.keyword.trim().toLowerCase());\n  }\n\n  onChange = (e) => {\n    var target = e.target;\n    var name = target.name;\n    var value = target.value;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  render() {\n      \n    return (\n      <div className=\"col-sm-6 col-md-6 col-lg-6 col-xl-6\">\n        <div className=\"input-group mb-3\">\n          <input type=\"text\" name=\"keyword\"\n            className=\"form-control border border-primary\"\n            onChange = { this.onChange }\n            placeholder=\"Search\"/>\n          <div className=\"input-group-append\">\n            <button className=\"btn btn-primary\" type=\"submit\"\n              onClick={this.onSearch }\n            >Search</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    onSearch : (keyword) => {\n      return dispatch(actions.searchTask(keyword));\n    } \n  };\n}\n\nexport default connect(null, mapDispatchToProps)(Search);\n","import React, { Component} from 'react';\nimport { connect} from 'react-redux';\nimport * as actions from '../actions/index';\n\nclass Sort extends Component {\n  \n  sortBy = (sortBy, value) => {\n    let sort = {by: sortBy, value: value};\n    this.props.onSortTask(sort);\n  }\n\n  render() {\n    var {sort} = this.props;\n    return (\n      <div className=\"col-sm-6 col-md-6 col-lg-6 col-xl-6\">\n        <div className=\"btn-group\">\n          <button type=\"button\" className=\"btn btn-info dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n            Sort\n            {/* <i className=\"far fa-caret-square-down\"></i> */}\n          </button>\n          <div className=\"dropdown-menu\">\n            <button  className={(sort.by ==='name'&& sort.value ===1)? \"dropdown-item sort-selected\": \"dropdown-item\"} \n              onClick={ () => this.sortBy(\"name\", 1)}\n            >\n              <i className=\"sort-icon fas fa-sort-alpha-down\"></i> A - Z\n            </button>\n            <button  className={(sort.by ==='name'&& sort.value ===-1)? \"dropdown-item sort-selected\": \"dropdown-item\"} \n              onClick={ () => this.sortBy(\"name\", -1)}\n            >\n              <i className=\"sort-icon fas fa-sort-alpha-down-alt\"></i>  Z - A\n            </button>\n            <div className=\"dropdown-divider\"></div>\n            <button className={(sort.by ==='status'&& sort.value ===1)? \"dropdown-item sort-selected\": \"dropdown-item\"} \n              onClick={ () => this.sortBy(\"status\", 1)}\n            >Active</button>\n            <button  className={(sort.by ==='status'&& sort.value ===-1)? \"dropdown-item sort-selected\": \"dropdown-item\"} \n              onClick={ () => this.sortBy(\"status\", -1)}\n            >Hidden</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) =>{\n  return {\n    sort: state.sort\n  }\n}\nconst mapDispatchToProps = (dispatch, props) => {\n  return {\n    onSortTask: (sort) => {\n      return dispatch(actions.sortTask(sort));\n    }\n  };\n}\nexport default connect(mapStateToProps, mapDispatchToProps) (Sort);\n","import React, { Component} from 'react';\nimport Search from './Search';\nimport Sort from './Sort';\nclass Control extends Component {\n\n  render() {\n      \n    return (\n      <div className=\"row\" style={{ padding: \"10px 0\"}}>\n        {/*Serch*/}\n        <Search/>\n        {/*Sort*/}\n        <Sort />\n      </div>\n    );\n  }\n}\n\nexport default Control;\n","import React, { Component} from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions/index';\n\nclass Form extends Component {\n\n  constructor(props) {\n\n    super(props);\n    \n    this.state={\n      id:'',\n      name:\"\",\n      status: \"active\"\n    \n    };\n    \n  }\n  \n  componentDidMount() {\n    \n    var {taskEditing} = this.props;\n    if (taskEditing) {\n      this.setState({ \n        id: taskEditing.id,\n        name: taskEditing.name,\n        status: taskEditing.status\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (!nextProps) {\n      return;\n    }\n    var taskEdit = nextProps.taskEditing;\n    if (taskEdit) {\n      // console.log(\"edit\", taskEdit);\n      this.setState({ \n        id: taskEdit.id,\n        name: taskEdit.name,\n        status: taskEdit.status\n      });\n    }  else {\n      this.setState({\n        id: '', \n        name: '',\n        status: 'active'\n      });\n    }\n  }\n\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   console.log(this.props.taskEditing);\n  //   if(prevProps.taskEditing !==this.props.taskEditing && this.props.taskEditing){\n  //      this.setState ({\n  //       id: this.props.taskEditing.id,\n  //       name: this.props.taskEditing.name,\n  //       status: this.props.taskEditing.status\n  //     });\n  //   } else {\n     \n  //   }\n\n  //  }\n  onChange = (e) => {\n    var target = e.target;\n    var name = target.name;\n    var value = target.value;\n\n    this.setState({\n      [name]: value\n    });\n\n  }\n  onSubmit = (e) => {\n    e.preventDefault();\n    if(this.state.name ==='') {\n      return;\n    }\n    this.props.onSaveTask(this.state);\n    this.resetForm();\n    this.props.onSetNullEditingTask();\n  }\n  resetForm = () => {\n    this.setState({\n      name:'', \n      status:'active'\n    });\n    \n  }\n\n  onCloseForm = () => {\n    this.props.onCloseForm();\n    this.props.onSetNullEditingTask();\n  }\n\n  render() {\n    if (!this.props.isDisplayForm) return '';\n    \n    return (\n      \n    <div className=\"card\">\n      <div className=\"card-header bg-info\">{ this.state.id ? \"Update task\": \"Create new task\"}\n      <button type=\"button\" className=\"close\" aria-label=\"Close\"\n        onClick={ this.onCloseForm }\n      >\n          <span aria-hidden=\"true\" style={{ color: \"white\"}}>&times;</span>\n      </button>\n      </div>\n      <div className=\"card-body\">\n          <form onSubmit={ this.onSubmit }>\n            <div className=\"form-group\">\n              <label htmlFor=\"name\">Name</label>\n              <input type=\"text\" name=\"name\"\n                className=\"form-control\" id=\"name\"\n                value={ this.state.name }\n                onChange={ this.onChange }\n                />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"status\">Status</label>\n              <select className=\"form-control\" \n                name=\"status\"id=\"status\"\n                value={this.state.status }\n                onChange={ this.onChange }\n                >\n                <option value=\"active\">Active</option>\n                <option value=\"hiden\">Hiden</option>\n                <option value=\"complete\">Complele</option>\n              </select>\n            </div>\n            <div className=\"card-footer\">\n              <button disabled={ this.state.name ===''} type=\"submit\" className=\"btn btn-primary mr-2\">Save</button>\n              <button\n                  type=\"reset\" \n                  className=\"btn btn-info mr-2\"\n                  onClick={ this.resetForm }\n                  >Reset</button>\n                  \n            </div>\n          </form>\n      </div>\n    </div>\n     \n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    isDisplayForm: state.isDisplayForm,\n    taskEditing: state.taskEditing\n\n  }\n}\n\nconst mapDispatchToProps = (dispatch, props) => {\n  return {\n    onSaveTask: (task) => {\n      dispatch(actions.saveTask(task));\n    },\n    onCloseForm: ()=> {\n      dispatch(actions.closeForm());\n    },\n    onSetNullEditingTask: () => {\n      dispatch(actions.setNullTaskEditing());\n    }\n  }\n} \nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","import React, { Component} from  'react';\nimport { connect} from 'react-redux';\nimport * as actions from '../actions/index';\n\n\nclass TaskItem extends Component {\n\n  onUpdateStatus = () => {\n    this.props.onUpdateStatus(this.props.task.id)\n  }\n\n  statusHandle =(status) => {\n    const trust = {\n      active:{title:\"Active\", class:\"badge badge-info\"}, \n      hiden:{title:\"Hiden\", class:\"badge badge-danger\"},\n      complete:{title:\"Completed\", class:\"badge badge-success\"},\n    }\n    let info = trust[status];\n    \n    return <span\n      style = {{cursor: \"pointer\"}} \n      onClick={ this.onUpdateStatus } \n      className={info.class}>{ info.title }</span>\n    \n  }\n\n  onDeleteTask = () => {\n    this.props.onDeleteTask(this.props.task.id);\n    this.props.onCloseForm();\n  }\n  \n  onUpdateTask = () => {\n    this.props.onOpenForm();\n    this.props.onUpdateTask(this.props.task);\n  }\n\n  render() {\n    var {task, index} = this.props;\n\n    return (\n\n      <tr className=\"d-flex\">\n          <td className=\"col-1\" >{index + 1}</td>\n          <td className=\"col-7\">{ task.name }</td>\n          <td className=\"col-2\">\n            {this.statusHandle(task.status)}\n          </td>\n          <td className=\"col-2\" style = {{padding:\"5px\"}}>\n            <button className=\"btn-ed btn btn-warning \"\n              style={{marginRight:\"5px\"}}\n              onClick={ this.onUpdateTask }\n            >\n            <i className=\"far fa-edit\"></i> Edit\n            </button>\n            <button \n              onClick={ this.onDeleteTask }\n              className=\"btn-ed btn btn-danger\">\n              <i className=\"far fa-trash-alt\"></i> Delete\n            </button>\n          </td>\n      </tr>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    \n  };\n}\n\nconst mapDispatchToProps = (dispatch, props) => {\n  return {\n    onUpdateStatus : (id) => {\n      return dispatch(actions.updateStatus(id));\n    },\n    onDeleteTask: (id) => {\n      return dispatch(actions.deleteTask(id));\n    },\n    onCloseForm: ()=> {\n      return dispatch(actions.closeForm());\n    },\n    onOpenForm: () => {\n      return dispatch(actions.openForm());\n    },\n    onUpdateTask: (task) => {\n      return dispatch(actions.updateTask(task));\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps) (TaskItem);","import React, { Component} from  'react';\nimport TaskItem from './TaskItem';\nimport { filter } from 'lodash';\nimport { connect } from 'react-redux';\n// import * as actions from '../actions/index';\n\nclass TaskList extends Component {\n\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      filterName : '',\n      filterStatus  : \"all\"\n    };\n  }\n  \n  onChange = (e) => {\n    var target = e.target;\n    var name = target.name;\n    var value = target.value;\n\n    this.setState({\n      [name]: value\n    });\n\n  }\n\n  render() {\n    var {tasks, keyword, sort} = this.props;\n    var {filterStatus, filterName} = this.state;\n    // filter handle.\n    if (filterStatus !== 'all') {\n      tasks = filter(tasks, (a) => {\n        return filterStatus === a.status;\n      });\n    }\n    if (filterName.trim() !== '') {\n      tasks = filter(tasks, (a) => {\n        return a.name.toLowerCase().indexOf(filterName.toLowerCase().trim()) !== -1\n      });\n    }\n   \n    // search handle\n    if (keyword !== '') {\n      tasks = filter(tasks, (task) => {\n        return task.name.toLowerCase().indexOf(keyword) !== -1;\n      });\n    }\n    // sort handle\n    if (sort.by) {\n\n      tasks.sort((a, b) => {\n        if(a[sort.by].toLowerCase() === b[sort.by].toLowerCase()) return 0;\n        return (a[sort.by].toLowerCase() > b[sort.by].toLowerCase()) ? sort.value : -sort.value;\n      });\n    }\n\n\n    var elems = tasks.map((task, index) => {\n          return <TaskItem key={index} \n            task={task} index={index}\n          />\n    });\n\n    return (\n      <table className=\"table table-bordered table-hover\">\n        <thead>\n          <tr className=\"d-flex\">\n            <th className=\"col-1\">Index</th>\n            <th className=\"col-7\">Name</th>\n            <th className=\"col-2\">Status</th>\n            <th className=\"col-2 col-sm-4\">Action</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr className=\"d-flex\">\n            <td className=\"col-1\"></td>\n            <td className=\"col-7\">\n                <input\n                  type=\"text\" className=\"form-control\"\n                  name=\"filterName\"\n                  placeholder=\"Filter by name\"\n                  onChange = { this.onChange }\n                />\n            </td>\n            <td className=\"col-2\">\n              <select className=\"form-control\"\n                name=\"filterStatus\"\n                onChange = { this.onChange }\n                value={ this.state.filterStatus }\n              >\n                <option value=\"all\">All</option>\n                <option value =\"active\">Active</option>\n                <option value=\"hiden\">Hiden</option>\n                <option value=\"complete\">Completed</option>\n              </select>\n            </td>\n            <td className=\"col-2\"></td>\n          </tr>\n          {elems}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    tasks: state.tasks,\n    keyword: state.search,\n    sort: state.sort,\n  };\n}\nconst mapDispatchToProps = (dispatch, props) => {\n  return {\n    // onFilterTaskList: (filter) => {\n    //   return dispatch(actions.filterTaskList(filter));\n    // }\n  };\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskList);","import React, { Component} from 'react';\n\nimport './App.css';\nimport Control from './components/Control';\nimport Form from './components/Form';\nimport TaskList from './components/TaskList';\nimport { connect} from 'react-redux';\nimport * as actions from './actions/index';\n\n// import demo from './tranning/demo';\n\nclass App extends Component {\n \n  onToggleForm = () => {\n    if (this.props.taskEditing) {\n      this.props.onSetNullEditingTask();\n      this.props.onOpenForm();\n    } else {\n      this.props.onToggleForm();\n    }\n  }\n\n  render() {\n    let { isDisplayForm } = this.props;\n\n    return (\n      <div className=\"container-fluid\" style={{marginTop:\"20px\"}}>\n        <h1 className=\"text-center\">TO DO APP</h1>\n\n        <div className=\"row\">\n          <div className={ isDisplayForm ? \"col-sm-4 col-md-4 col-lg-4 col-xl-4\":\"w-0\" }\n            style ={{ transition:\"all 1s\"}}>\n            <Form />\n          </div>\n          <div className={ isDisplayForm ? \"col-sm-8 col-md-8 col-lg-8 col-xl-8\" : \n                            \"col-sm-12 col-md-12 col-lg-12 col-xl-12\"}>\n              <button \n                className=\"btn btn-primary  mr-5\"\n                onClick={this.onToggleForm }>                \n                <span className=\"fa fa-plus\"></span>Add new task\n              </button>\n              <Control/>\n              <TaskList/>\n          </div>\n        </div>\n      </div>\n    );;\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    isDisplayForm: state.isDisplayForm,\n    taskEditing: state.taskEditing,\n  };\n}\n\nconst mapDispatchToProps = (dispatch, props) => {\n  return {\n    onToggleForm: () => {\n      dispatch(actions.toggleForm());\n    },\n    onOpenForm: () => {\n      return dispatch(actions.openForm());\n    },\n    onSetNullEditingTask: () => {\n      dispatch(actions.setNullTaskEditing());\n    }\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as types from '../constants/ActionTypes';\nimport { findIndex } from 'lodash';\n\nvar data = JSON.parse(localStorage.getItem('tasks'));\n\nvar initialState = data ? data: [];\n\nvar makeid = (length = 5) => {\n    var result           = '';\n    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for ( var i = 0; i < length; i++ ) {\n       result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n}\n\nconst STATUS_CHANGE = {active: 'complete', complete:'hiden', hiden:'active'};\n\nvar myReducer = (state = initialState, action) => {\n    let index = -1;\n\n    switch (action.type) {\n        case types.LIST_ALL:\n            return state;\n        case types.SAVE_TASK:\n            // edit\n\n            if (action.task.id) {\n                index = findIndex(state, (task) => {\n                    return task.id === action.task.id\n                });\n\n                if (index !== -1) {\n                    state[index] = action.task;\n                }\n            } else {\n                let newTask = {\n                    id: makeid(5),\n                    name: action.task.name,\n                    status: action.task.status\n                }\n                state = [newTask, ...state];\n\n            }\n            \n            localStorage.setItem('tasks', JSON.stringify(state));\n            return [...state];\n\n        case types.UPDATE_STATUS_TASK:\n            index = findIndex(state, (task)=> {\n                return task.id === action.id;\n            });\n            if(index !== -1) {\n                state[index] = {\n                    ...state[index],\n                    status:STATUS_CHANGE[state[index].status]\n                }\n               \n            }\n            localStorage.setItem('tasks', JSON.stringify(state));\n            return [...state];\n        case types.DELETE_TASK:\n            index = findIndex(state, (task)=> {\n                return task.id === action.id;\n            });\n            if(index !== -1) {\n                state.splice(index, 1);\n            }\n            localStorage.setItem('tasks', JSON.stringify(state));\n            return [...state];\n\n        default: return state;\n            \n    }\n    // return state;\n}\n\nexport default myReducer;\n","import * as types from '../constants/ActionTypes';\n\n\n\nlet initialState = false; // default is not display.\n\nlet myReducer = (state= initialState, action) => {\n    switch (action.type) {\n        case types.TOGGLE_FORM:\n            return !state;\n        case types.CLOSE_FORM:\n            return false;\n            \n        case types.OPEN_FORM:\n            return true;\n\n        default: return state;\n    }\n}\n\nexport default myReducer;\n","import * as types from '../constants/ActionTypes';\n\nlet initialState = null;\n\nlet myReducer = (state= initialState, action) => {\n    switch (action.type) {\n        case types.UPDATE_TASK:\n            return action.task;\n        case types.SET_NULL_EDIT_TASK:\n            return null;\n        default: return state;\n\n    }\n}\n\nexport default myReducer;\n","import * as types from '../constants/ActionTypes';\n\n\n\nlet initialState = ''; // default is not display.\n\nlet myReducer = (state= initialState, action) => {\n    switch (action.type) {\n        case types.SEARCH_TASK:\n            return action.keyword;\n            \n        default: return state;\n    }\n}\n\nexport default myReducer;\n","import * as types from '../constants/ActionTypes';\n\n\n\nlet initialState = {\n                    by:'name',\n                    value: 1\n                }; // default is not display.\n\nlet myReducer = (state= initialState, action) => {\n    switch (action.type) {\n        case types.SORT_TASK:\n            return action.sort;            \n        default: return state;\n    }\n}\n\nexport default myReducer;\n","import { combineReducers } from 'redux';\nimport tasks from './tasks';\nimport isDisplayForm from './isDisplayForm';\nimport taskEditing from './taskEditing';\n// import filter from './filterTaskList';\nimport search from './searchTask';\nimport sort from './sortTask';\n\nconst myReducer = combineReducers ({\n    tasks, // tasks: tasks\n    isDisplayForm,\n    taskEditing,\n    // filter,\n    search,\n    sort\n    \n});\n\nexport default myReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore } from 'redux';\nimport myReducer from './reducers/index';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(\n  myReducer, \n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  );\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store= {store} >\n      <App />\n    </Provider>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}